nest js is for building efficient, scalable server side application.

Express is better to use for solving problems kind of routing, body parsing, etc.  

NestJS is quite good to structure your code in a better-organized way, it allows you to write clearer, reusable code with higher-level constructs like filters, pipes, interceptors, etc.

However NestJS uses the Express middleware.

start with nest js

$ npm i -g @nestjs/cli
$ nest new project-name


Vanila Javascript: "VanillaJS is a name to refer to using plain JavaScript without any additional libraries like jQuery
 to use it we need a Babel compiler.

 Controllers:
Controllers are responsible for handling incoming requests and returning responses to the client.

Providers:
 The main idea of a provider is that it can inject dependencies; this means objects can create various 
 relationships with each other, and the function of "wiring up" instances of objects can largely be delegated 
 to the Nest runtime system. 
 A provider is simply a class annotated with an @Injectable() decorator.

 Modules
A module is a class annotated with a @Module() decorator. The @Module() decorator provides 
metadata that Nest makes use of to organize the application structure.


Middleware
Middleware is a function which is called before the route handler. Middleware functions have access to 
the request and response objects, and the next() middleware function in the applicationâ€™s request-response cycle.
The next middleware function is commonly denoted by a variable named next.

Middleware functions can perform the following tasks:
execute any code.
make changes to the request and the response objects.
end the request-response cycle.
call the next middleware function in the stack.
if the current middleware function does not end the request-response cycle, it must call next() to pass 
control to the next middleware function. Otherwise, the request will be left hanging.


Exception filters
Nest comes with a built-in exceptions layer which is responsible for processing all unhandled exceptions 
across an application. When an exception is not handled by your application code, it is caught by this layer,
which then automatically sends an appropriate user-friendly response.


Pipes
A pipe is a class annotated with the @Injectable() decorator. Pipes should implement the PipeTransform interface.


Pipes have two typical use cases:

transformation: transform input data to the desired form (e.g., from string to integer)
validation: evaluate input data and if valid, simply pass it through unchanged; otherwise, 
throw an exception when the data is incorrect


Built-in pipes#
Nest comes with six pipes available out-of-the-box:

ValidationPipe
ParseIntPipe
ParseBoolPipe
ParseArrayPipe
ParseUUIDPipe
DefaultValuePipe


Pipes
Built-in pipes
Binding pipes
Custom pipes
Schema based validation
Object schema validation
Binding validation pipes
Class validator
Global scoped pipes
Transformation use case
Providing defaults
The built-in ValidationPipe
ads via Carbon
Limited time offer: Get 10 free Adobe Stock images.
ADS VIA CARBON
Pipes
A pipe is a class annotated with the @Injectable() decorator. Pipes should implement the PipeTransform interface.


Pipes have two typical use cases:

transformation: transform input data to the desired form (e.g., from string to integer)
validation: evaluate input data and if valid, simply pass it through unchanged; otherwise, throw an exception when the data is incorrect
In both cases, pipes operate on the arguments being processed by a controller route handler. Nest interposes a pipe just before a method is invoked, and the pipe receives the arguments destined for the method and operates on them. Any transformation or validation operation takes place at that time, after which the route handler is invoked with any (potentially) transformed arguments.

Nest comes with a number of built-in pipes that you can use out-of-the-box. You can also build your own custom pipes. In this chapter, we'll introduce the built-in pipes and show how to bind them to route handlers. We'll then examine several custom-built pipes to show how you can build one from scratch.

HINT
Pipes run inside the exceptions zone. This means that when a Pipe throws an exception it is handled by the exceptions layer (global exceptions filter and any exceptions filters that are applied to the current context). Given the above, it should be clear that when an exception is thrown in a Pipe, no controller method is subsequently executed. This gives you a best-practice technique for validating data coming into the application from external sources at the system boundary.
Built-in pipes#
Nest comes with six pipes available out-of-the-box:

ValidationPipe
ParseIntPipe
ParseBoolPipe
ParseArrayPipe
ParseUUIDPipe
DefaultValuePipe
They're exported from the @nestjs/common package.

Let's take a quick look at using ParseIntPipe. This is an example of the transformation use case
, where the pipe ensures that a method handler parameter is converted to a JavaScript integer 
(or throws an exception if the conversion fails). Later in this chapter, we'll show a simple custom
 implementation for a ParseIntPipe. The example techniques below also apply to the other built-in 
 transformation pipes (ParseBoolPipe, ParseArrayPipe and ParseUUIDPipe, which we'll refer to as the Parse* 
 pipes in this chapter).


Binding pipes#
To use a pipe, we need to bind an instance of the pipe class to the appropriate context. 
In our ParseIntPipe example, we want to associate the pipe with a particular route handler method, 
and make sure it runs before the method is called. We do so with the following construct, 
which we'll refer to as binding the pipe at the method parameter level:


Custom pipes#
As mentioned, you can build your own custom pipes. While Nest provides a robust built-in ParseIntPipe and ValidationPipe,
let's build simple custom versions of each from scratch to see how custom pipes are constructed.


Guards
A guard is a class annotated with the @Injectable() decorator. 
Guards should implement the CanActivate interface.

Guards have a single responsibility. They determine whether a given request will be handled by the 
route handler or not, depending on certain conditions (like permissions, roles, ACLs, etc.) present at
 run-time. This is often referred to as authorization. Authorization (and its cousin, authentication, 
 with which it usually collaborates) has typically been handled by middleware in traditional Express applications. 
 Middleware is a fine choice for authentication, since things like token validation and attaching properties
 to the request object are not strongly connected with a particular route context (and its metadata).

But middleware, by its nature, is dumb. It doesn't know which handler will be executed after calling the next()
 function. On the other hand, Guards have access to the ExecutionContext instance, and thus know exactly 
 what's going to be executed next. They're designed, much like exception filters, pipes, and interceptors
 , to let you interpose processing logic at exactly the right point in the request/response cycle,
 and to do so declaratively. This helps keep your code DRY and declarative.


 Interceptors
An interceptor is a class annotated with the @Injectable() decorator. 
Interceptors should implement the NestInterceptor interface.

Interceptors have a set of useful capabilities which are inspired by the Aspect Oriented Programming (AOP) 
technique. They make it possible to:

bind extra logic before / after method execution
transform the result returned from a function
transform the exception thrown from a function
extend the basic function behavior
completely override a function depending on specific conditions (e.g., for caching purposes)


Param decorators#
Nest provides a set of useful param decorators that you can use together with the HTTP route handlers. 
Below is a list of the provided decorators and the plain Express (or Fastify) objects they represent

@Request(), @Req()	req
@Response(), @Res()	res
@Next()	next
